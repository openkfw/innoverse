### This file was generated by Nexus Schema
### Do not make changes to this file directly


input BooleanFilterInput {
  and: [Boolean]
  between: [Boolean]
  contains: Boolean
  containsi: Boolean
  endsWith: Boolean
  eq: Boolean
  eqi: Boolean
  gt: Boolean
  gte: Boolean
  in: [Boolean]
  lt: Boolean
  lte: Boolean
  ne: Boolean
  nei: Boolean
  not: BooleanFilterInput
  notContains: Boolean
  notContainsi: Boolean
  notIn: [Boolean]
  notNull: Boolean
  null: Boolean
  or: [Boolean]
  startsWith: Boolean
}

type CollaborationQuestion {
  authors(filters: InnoUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): InnoUserRelationResponseCollection
  createdAt: DateTime
  description: String!
  isPlatformFeedback: Boolean!
  project: ProjectEntityResponse
  publishedAt: DateTime
  title: String!
  updatedAt: DateTime
}

type CollaborationQuestionEntity {
  attributes: CollaborationQuestion
  id: ID
}

type CollaborationQuestionEntityResponse {
  data: CollaborationQuestionEntity
}

type CollaborationQuestionEntityResponseCollection {
  data: [CollaborationQuestionEntity!]!
  meta: ResponseCollectionMeta!
}

input CollaborationQuestionFiltersInput {
  and: [CollaborationQuestionFiltersInput]
  authors: InnoUserFiltersInput
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  isPlatformFeedback: BooleanFilterInput
  not: CollaborationQuestionFiltersInput
  or: [CollaborationQuestionFiltersInput]
  project: ProjectFiltersInput
  publishedAt: DateTimeFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input CollaborationQuestionInput {
  authors: [ID]
  description: String
  isPlatformFeedback: Boolean
  project: ID
  publishedAt: DateTime
  title: String
}

type CollaborationQuestionRelationResponseCollection {
  data: [CollaborationQuestionEntity!]!
}

type ComponentDescriptionDescription {
  id: ID!
  tags(filters: ComponentTagsTagsFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentTagsTags]!
  text: String!
}

input ComponentDescriptionDescriptionFiltersInput {
  and: [ComponentDescriptionDescriptionFiltersInput]
  not: ComponentDescriptionDescriptionFiltersInput
  or: [ComponentDescriptionDescriptionFiltersInput]
  tags: ComponentTagsTagsFiltersInput
  text: StringFilterInput
}

input ComponentDescriptionDescriptionInput {
  id: ID
  tags: [ComponentTagsTagsInput]
  text: String
}

type ComponentImageImage {
  id: ID!
  projectFrom: String
  projectTo: String
  sliderImage: UploadFileEntityResponse
  title: String
  year: String
}

input ComponentImageImageFiltersInput {
  and: [ComponentImageImageFiltersInput]
  not: ComponentImageImageFiltersInput
  or: [ComponentImageImageFiltersInput]
  projectFrom: StringFilterInput
  projectTo: StringFilterInput
  title: StringFilterInput
  year: StringFilterInput
}

input ComponentImageImageInput {
  id: ID
  projectFrom: String
  projectTo: String
  sliderImage: ID
  title: String
  year: String
}

type ComponentResponseOptionsResponseOptions {
  id: ID!
  responseOption: String!
}

input ComponentResponseOptionsResponseOptionsFiltersInput {
  and: [ComponentResponseOptionsResponseOptionsFiltersInput]
  not: ComponentResponseOptionsResponseOptionsFiltersInput
  or: [ComponentResponseOptionsResponseOptionsFiltersInput]
  responseOption: StringFilterInput
}

input ComponentResponseOptionsResponseOptionsInput {
  id: ID
  responseOption: String
}

type ComponentSliderTextSliderText {
  description: String
  id: ID!
  tags: JSON
  title: String
}

input ComponentSliderTextSliderTextFiltersInput {
  and: [ComponentSliderTextSliderTextFiltersInput]
  description: StringFilterInput
  not: ComponentSliderTextSliderTextFiltersInput
  or: [ComponentSliderTextSliderTextFiltersInput]
  tags: JSONFilterInput
  title: StringFilterInput
}

input ComponentSliderTextSliderTextInput {
  description: String
  id: ID
  tags: JSON
  title: String
}

type ComponentTagsTags {
  id: ID!
  tag: String!
}

input ComponentTagsTagsFiltersInput {
  and: [ComponentTagsTagsFiltersInput]
  not: ComponentTagsTagsFiltersInput
  or: [ComponentTagsTagsFiltersInput]
  tag: StringFilterInput
}

input ComponentTagsTagsInput {
  id: ID
  tag: String
}

type ComponentThemeTheme {
  id: ID!
  theme: String
}

input ComponentThemeThemeFiltersInput {
  and: [ComponentThemeThemeFiltersInput]
  not: ComponentThemeThemeFiltersInput
  or: [ComponentThemeThemeFiltersInput]
  theme: StringFilterInput
}

input ComponentThemeThemeInput {
  id: ID
  theme: String
}

type ComponentUserAuthor {
  avatar: UploadFileEntityResponse
  department: String
  id: ID!
  name: String!
  role: String!
}

input ComponentUserAuthorFiltersInput {
  and: [ComponentUserAuthorFiltersInput]
  department: StringFilterInput
  name: StringFilterInput
  not: ComponentUserAuthorFiltersInput
  or: [ComponentUserAuthorFiltersInput]
  role: StringFilterInput
}

input ComponentUserAuthorInput {
  avatar: ID
  department: String
  id: ID
  name: String
  role: String
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

input DateFilterInput {
  and: [Date]
  between: [Date]
  contains: Date
  containsi: Date
  endsWith: Date
  eq: Date
  eqi: Date
  gt: Date
  gte: Date
  in: [Date]
  lt: Date
  lte: Date
  ne: Date
  nei: Date
  not: DateFilterInput
  notContains: Date
  notContainsi: Date
  notIn: [Date]
  notNull: Boolean
  null: Boolean
  or: [Date]
  startsWith: Date
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFilterInput {
  and: [DateTime]
  between: [DateTime]
  contains: DateTime
  containsi: DateTime
  endsWith: DateTime
  eq: DateTime
  eqi: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  ne: DateTime
  nei: DateTime
  not: DateTimeFilterInput
  notContains: DateTime
  notContainsi: DateTime
  notIn: [DateTime]
  notNull: Boolean
  null: Boolean
  or: [DateTime]
  startsWith: DateTime
}

enum ENUM_EVENT_TYPE {
  In_office
  Remote
  Remote_und_In_office
}

enum ENUM_PROJECT_STATUS {
  Exploration
  Konzeption
  Live
  Proof_of_Concept
}

type Error {
  code: String!
  message: String
}

type Event {
  Themes(filters: ComponentThemeThemeFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentThemeTheme]
  author: InnoUserEntityResponse
  createdAt: DateTime
  description: String
  endTime: DateTime
  image: UploadFileEntityResponse
  location: String
  project: ProjectEntityResponse
  publishedAt: DateTime
  startTime: DateTime!
  title: String!
  type: ENUM_EVENT_TYPE
  updatedAt: DateTime
}

type EventEntity {
  attributes: Event
  id: ID
}

type EventEntityResponse {
  data: EventEntity
}

type EventEntityResponseCollection {
  data: [EventEntity!]!
  meta: ResponseCollectionMeta!
}

input EventFiltersInput {
  Themes: ComponentThemeThemeFiltersInput
  and: [EventFiltersInput]
  author: InnoUserFiltersInput
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  endTime: DateTimeFilterInput
  id: IDFilterInput
  location: StringFilterInput
  not: EventFiltersInput
  or: [EventFiltersInput]
  project: ProjectFiltersInput
  publishedAt: DateTimeFilterInput
  startTime: DateTimeFilterInput
  title: StringFilterInput
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input EventInput {
  Themes: [ComponentThemeThemeInput]
  author: ID
  description: String
  endTime: DateTime
  image: ID
  location: String
  project: ID
  publishedAt: DateTime
  startTime: DateTime
  title: String
  type: ENUM_EVENT_TYPE
}

type EventRelationResponseCollection {
  data: [EventEntity!]!
}

input FileInfoInput {
  alternativeText: String
  caption: String
  name: String
}

input FloatFilterInput {
  and: [Float]
  between: [Float]
  contains: Float
  containsi: Float
  endsWith: Float
  eq: Float
  eqi: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  ne: Float
  nei: Float
  not: FloatFilterInput
  notContains: Float
  notContainsi: Float
  notIn: [Float]
  notNull: Boolean
  null: Boolean
  or: [Float]
  startsWith: Float
}

union GenericMorph = CollaborationQuestion | ComponentDescriptionDescription | ComponentImageImage | ComponentResponseOptionsResponseOptions | ComponentSliderTextSliderText | ComponentTagsTags | ComponentThemeTheme | ComponentUserAuthor | Event | I18NLocale | InnoUser | Opportunity | Project | Question | SurveyQuestion | Update | UploadFile | UploadFolder | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsUser

type I18NLocale {
  code: String
  createdAt: DateTime
  name: String
  updatedAt: DateTime
}

"""A string used to identify an i18n locale"""
scalar I18NLocaleCode

type I18NLocaleEntity {
  attributes: I18NLocale
  id: ID
}

type I18NLocaleEntityResponse {
  data: I18NLocaleEntity
}

type I18NLocaleEntityResponseCollection {
  data: [I18NLocaleEntity!]!
  meta: ResponseCollectionMeta!
}

input I18NLocaleFiltersInput {
  and: [I18NLocaleFiltersInput]
  code: StringFilterInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: I18NLocaleFiltersInput
  or: [I18NLocaleFiltersInput]
  updatedAt: DateTimeFilterInput
}

input I18NLocaleInput {
  code: String
  name: String
}

type I18NLocaleRelationResponseCollection {
  data: [I18NLocaleEntity!]!
}

input IDFilterInput {
  and: [ID]
  between: [ID]
  contains: ID
  containsi: ID
  endsWith: ID
  eq: ID
  eqi: ID
  gt: ID
  gte: ID
  in: [ID]
  lt: ID
  lte: ID
  ne: ID
  nei: ID
  not: IDFilterInput
  notContains: ID
  notContainsi: ID
  notIn: [ID]
  notNull: Boolean
  null: Boolean
  or: [ID]
  startsWith: ID
}

type InnoUser {
  avatar: UploadFileEntityResponse
  collaboration_questions(filters: CollaborationQuestionFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CollaborationQuestionRelationResponseCollection
  createdAt: DateTime
  department: String
  email: String
  name: String!
  opportunities(filters: OpportunityFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): OpportunityRelationResponseCollection
  project: ProjectEntityResponse
  projects: ProjectEntityResponse
  provider: String
  providerId: String
  questions(filters: QuestionFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): QuestionRelationResponseCollection
  role: String
  updatedAt: DateTime
  username: String
}

type InnoUserEntity {
  attributes: InnoUser
  id: ID
}

type InnoUserEntityResponse {
  data: InnoUserEntity
}

type InnoUserEntityResponseCollection {
  data: [InnoUserEntity!]!
  meta: ResponseCollectionMeta!
}

input InnoUserFiltersInput {
  and: [InnoUserFiltersInput]
  collaboration_questions: CollaborationQuestionFiltersInput
  createdAt: DateTimeFilterInput
  department: StringFilterInput
  email: StringFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: InnoUserFiltersInput
  opportunities: OpportunityFiltersInput
  or: [InnoUserFiltersInput]
  project: ProjectFiltersInput
  projects: ProjectFiltersInput
  provider: StringFilterInput
  providerId: StringFilterInput
  questions: QuestionFiltersInput
  role: StringFilterInput
  updatedAt: DateTimeFilterInput
  username: StringFilterInput
}

input InnoUserInput {
  avatar: ID
  collaboration_questions: [ID]
  department: String
  email: String
  name: String
  opportunities: [ID]
  project: ID
  projects: ID
  provider: String
  providerId: String
  questions: [ID]
  role: String
  username: String
}

type InnoUserRelationResponseCollection {
  data: [InnoUserEntity!]!
}

input IntFilterInput {
  and: [Int]
  between: [Int]
  contains: Int
  containsi: Int
  endsWith: Int
  eq: Int
  eqi: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  ne: Int
  nei: Int
  not: IntFilterInput
  notContains: Int
  notContainsi: Int
  notIn: [Int]
  notNull: Boolean
  null: Boolean
  or: [Int]
  startsWith: Int
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input JSONFilterInput {
  and: [JSON]
  between: [JSON]
  contains: JSON
  containsi: JSON
  endsWith: JSON
  eq: JSON
  eqi: JSON
  gt: JSON
  gte: JSON
  in: [JSON]
  lt: JSON
  lte: JSON
  ne: JSON
  nei: JSON
  not: JSONFilterInput
  notContains: JSON
  notContainsi: JSON
  notIn: [JSON]
  notNull: Boolean
  null: Boolean
  or: [JSON]
  startsWith: JSON
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar Long

input LongFilterInput {
  and: [Long]
  between: [Long]
  contains: Long
  containsi: Long
  endsWith: Long
  eq: Long
  eqi: Long
  gt: Long
  gte: Long
  in: [Long]
  lt: Long
  lte: Long
  ne: Long
  nei: Long
  not: LongFilterInput
  notContains: Long
  notContainsi: Long
  notIn: [Long]
  notNull: Boolean
  null: Boolean
  or: [Long]
  startsWith: Long
}

type Mutation {
  """Change user password. Confirm with the current password."""
  changePassword(currentPassword: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  createCollaborationQuestion(data: CollaborationQuestionInput!): CollaborationQuestionEntityResponse
  createEvent(data: EventInput!): EventEntityResponse
  createInnoUser(data: InnoUserInput!): InnoUserEntityResponse
  createOpportunity(data: OpportunityInput!): OpportunityEntityResponse
  createProject(data: ProjectInput!): ProjectEntityResponse
  createQuestion(data: QuestionInput!): QuestionEntityResponse
  createSurveyQuestion(data: SurveyQuestionInput!): SurveyQuestionEntityResponse
  createUpdate(data: UpdateInput!): UpdateEntityResponse
  createUploadFile(data: UploadFileInput!): UploadFileEntityResponse
  createUploadFolder(data: UploadFolderInput!): UploadFolderEntityResponse

  """Create a new role"""
  createUsersPermissionsRole(data: UsersPermissionsRoleInput!): UsersPermissionsCreateRolePayload

  """Create a new user"""
  createUsersPermissionsUser(data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!
  deleteCollaborationQuestion(id: ID!): CollaborationQuestionEntityResponse
  deleteEvent(id: ID!): EventEntityResponse
  deleteInnoUser(id: ID!): InnoUserEntityResponse
  deleteOpportunity(id: ID!): OpportunityEntityResponse
  deleteProject(id: ID!): ProjectEntityResponse
  deleteQuestion(id: ID!): QuestionEntityResponse
  deleteSurveyQuestion(id: ID!): SurveyQuestionEntityResponse
  deleteUpdate(id: ID!): UpdateEntityResponse
  deleteUploadFile(id: ID!): UploadFileEntityResponse
  deleteUploadFolder(id: ID!): UploadFolderEntityResponse

  """Delete an existing role"""
  deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload

  """Delete an existing user"""
  deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!

  """Confirm an email users email address"""
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload

  """Request a reset password token"""
  forgotPassword(email: String!): UsersPermissionsPasswordPayload
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  multipleUpload(field: String, files: [Upload]!, ref: String, refId: ID): [UploadFileEntityResponse]!

  """Register a user"""
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  removeFile(id: ID!): UploadFileEntityResponse

  """
  Reset user password. Confirm with a code (resetToken from forgotPassword)
  """
  resetPassword(code: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  updateCollaborationQuestion(data: CollaborationQuestionInput!, id: ID!): CollaborationQuestionEntityResponse
  updateEvent(data: EventInput!, id: ID!): EventEntityResponse
  updateFileInfo(id: ID!, info: FileInfoInput): UploadFileEntityResponse!
  updateInnoUser(data: InnoUserInput!, id: ID!): InnoUserEntityResponse
  updateOpportunity(data: OpportunityInput!, id: ID!): OpportunityEntityResponse
  updateProject(data: ProjectInput!, id: ID!): ProjectEntityResponse
  updateQuestion(data: QuestionInput!, id: ID!): QuestionEntityResponse
  updateSurveyQuestion(data: SurveyQuestionInput!, id: ID!): SurveyQuestionEntityResponse
  updateUpdate(data: UpdateInput!, id: ID!): UpdateEntityResponse
  updateUploadFile(data: UploadFileInput!, id: ID!): UploadFileEntityResponse
  updateUploadFolder(data: UploadFolderInput!, id: ID!): UploadFolderEntityResponse

  """Update an existing role"""
  updateUsersPermissionsRole(data: UsersPermissionsRoleInput!, id: ID!): UsersPermissionsUpdateRolePayload

  """Update an existing user"""
  updateUsersPermissionsUser(data: UsersPermissionsUserInput!, id: ID!): UsersPermissionsUserEntityResponse!
  upload(field: String, file: Upload!, info: FileInfoInput, ref: String, refId: ID): UploadFileEntityResponse!
}

type Opportunity {
  contactPerson: InnoUserEntityResponse
  createdAt: DateTime
  description: String
  expense: String
  participants(filters: InnoUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): InnoUserRelationResponseCollection
  project: ProjectEntityResponse
  publishedAt: DateTime
  title: String!
  updatedAt: DateTime
}

type OpportunityEntity {
  attributes: Opportunity
  id: ID
}

type OpportunityEntityResponse {
  data: OpportunityEntity
}

type OpportunityEntityResponseCollection {
  data: [OpportunityEntity!]!
  meta: ResponseCollectionMeta!
}

input OpportunityFiltersInput {
  and: [OpportunityFiltersInput]
  contactPerson: InnoUserFiltersInput
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  expense: StringFilterInput
  id: IDFilterInput
  not: OpportunityFiltersInput
  or: [OpportunityFiltersInput]
  participants: InnoUserFiltersInput
  project: ProjectFiltersInput
  publishedAt: DateTimeFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input OpportunityInput {
  contactPerson: ID
  description: String
  expense: String
  participants: [ID]
  project: ID
  publishedAt: DateTime
  title: String
}

type OpportunityRelationResponseCollection {
  data: [OpportunityEntity!]!
}

type Pagination {
  page: Int!
  pageCount: Int!
  pageSize: Int!
  total: Int!
}

input PaginationArg {
  limit: Int
  page: Int
  pageSize: Int
  start: Int
}

type Project {
  author: InnoUserEntityResponse
  createdAt: DateTime
  description: ComponentDescriptionDescription!
  events(filters: EventFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): EventRelationResponseCollection
  featured: Boolean!
  image: UploadFileEntityResponse
  projectStart: Date!
  publishedAt: DateTime
  shortTitle: String
  status: ENUM_PROJECT_STATUS!
  summary: String!
  team(filters: InnoUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): InnoUserRelationResponseCollection
  title: String!
  updatedAt: DateTime
}

type ProjectEntity {
  attributes: Project
  id: ID
}

type ProjectEntityResponse {
  data: ProjectEntity
}

type ProjectEntityResponseCollection {
  data: [ProjectEntity!]!
  meta: ResponseCollectionMeta!
}

input ProjectFiltersInput {
  and: [ProjectFiltersInput]
  author: InnoUserFiltersInput
  createdAt: DateTimeFilterInput
  description: ComponentDescriptionDescriptionFiltersInput
  events: EventFiltersInput
  featured: BooleanFilterInput
  id: IDFilterInput
  not: ProjectFiltersInput
  or: [ProjectFiltersInput]
  projectStart: DateFilterInput
  publishedAt: DateTimeFilterInput
  shortTitle: StringFilterInput
  status: StringFilterInput
  summary: StringFilterInput
  team: InnoUserFiltersInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input ProjectInput {
  author: ID
  description: ComponentDescriptionDescriptionInput
  events: [ID]
  featured: Boolean
  image: ID
  projectStart: Date
  publishedAt: DateTime
  shortTitle: String
  status: ENUM_PROJECT_STATUS
  summary: String
  team: [ID]
  title: String
}

type ProjectRelationResponseCollection {
  data: [ProjectEntity!]!
}

enum PublicationState {
  LIVE
  PREVIEW
}

type Query {
  collaborationQuestion(id: ID): CollaborationQuestionEntityResponse
  collaborationQuestions(filters: CollaborationQuestionFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CollaborationQuestionEntityResponseCollection
  event(id: ID): EventEntityResponse
  events(filters: EventFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): EventEntityResponseCollection
  i18NLocale(id: ID): I18NLocaleEntityResponse
  i18NLocales(filters: I18NLocaleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): I18NLocaleEntityResponseCollection
  innoUser(id: ID): InnoUserEntityResponse
  innoUsers(filters: InnoUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): InnoUserEntityResponseCollection
  me: UsersPermissionsMe
  opportunities(filters: OpportunityFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): OpportunityEntityResponseCollection
  opportunity(id: ID): OpportunityEntityResponse
  project(id: ID): ProjectEntityResponse
  projects(filters: ProjectFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ProjectEntityResponseCollection
  question(id: ID): QuestionEntityResponse
  questions(filters: QuestionFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): QuestionEntityResponseCollection
  surveyQuestion(id: ID): SurveyQuestionEntityResponse
  surveyQuestions(filters: SurveyQuestionFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): SurveyQuestionEntityResponseCollection
  update(id: ID): UpdateEntityResponse
  updateOpportunityParticipants(id: ID!, participantId: ID!): OpportunityEntityResponse
  updates(filters: UpdateFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UpdateEntityResponseCollection
  uploadFile(id: ID): UploadFileEntityResponse
  uploadFiles(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileEntityResponseCollection
  uploadFolder(id: ID): UploadFolderEntityResponse
  uploadFolders(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderEntityResponseCollection
  usersPermissionsRole(id: ID): UsersPermissionsRoleEntityResponse
  usersPermissionsRoles(filters: UsersPermissionsRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsRoleEntityResponseCollection
  usersPermissionsUser(id: ID): UsersPermissionsUserEntityResponse
  usersPermissionsUsers(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserEntityResponseCollection
}

type Question {
  authors(filters: InnoUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): InnoUserRelationResponseCollection
  createdAt: DateTime
  project: ProjectEntityResponse
  publishedAt: DateTime
  title: String!
  updatedAt: DateTime
}

type QuestionEntity {
  attributes: Question
  id: ID
}

type QuestionEntityResponse {
  data: QuestionEntity
}

type QuestionEntityResponseCollection {
  data: [QuestionEntity!]!
  meta: ResponseCollectionMeta!
}

input QuestionFiltersInput {
  and: [QuestionFiltersInput]
  authors: InnoUserFiltersInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: QuestionFiltersInput
  or: [QuestionFiltersInput]
  project: ProjectFiltersInput
  publishedAt: DateTimeFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input QuestionInput {
  authors: [ID]
  project: ID
  publishedAt: DateTime
  title: String
}

type QuestionRelationResponseCollection {
  data: [QuestionEntity!]!
}

type ResponseCollectionMeta {
  pagination: Pagination!
}

input StringFilterInput {
  and: [String]
  between: [String]
  contains: String
  containsi: String
  endsWith: String
  eq: String
  eqi: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nei: String
  not: StringFilterInput
  notContains: String
  notContainsi: String
  notIn: [String]
  notNull: Boolean
  null: Boolean
  or: [String]
  startsWith: String
}

type SurveyQuestion {
  createdAt: DateTime
  project: ProjectEntityResponse
  publishedAt: DateTime
  question: String!
  responseOptions(filters: ComponentResponseOptionsResponseOptionsFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentResponseOptionsResponseOptions]!
  updatedAt: DateTime
}

type SurveyQuestionEntity {
  attributes: SurveyQuestion
  id: ID
}

type SurveyQuestionEntityResponse {
  data: SurveyQuestionEntity
}

type SurveyQuestionEntityResponseCollection {
  data: [SurveyQuestionEntity!]!
  meta: ResponseCollectionMeta!
}

input SurveyQuestionFiltersInput {
  and: [SurveyQuestionFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: SurveyQuestionFiltersInput
  or: [SurveyQuestionFiltersInput]
  project: ProjectFiltersInput
  publishedAt: DateTimeFilterInput
  question: StringFilterInput
  responseOptions: ComponentResponseOptionsResponseOptionsFiltersInput
  updatedAt: DateTimeFilterInput
}

input SurveyQuestionInput {
  project: ID
  publishedAt: DateTime
  question: String
  responseOptions: [ComponentResponseOptionsResponseOptionsInput]
}

type SurveyQuestionRelationResponseCollection {
  data: [SurveyQuestionEntity!]!
}

"""A time string with format HH:mm:ss.SSS"""
scalar Time

input TimeFilterInput {
  and: [Time]
  between: [Time]
  contains: Time
  containsi: Time
  endsWith: Time
  eq: Time
  eqi: Time
  gt: Time
  gte: Time
  in: [Time]
  lt: Time
  lte: Time
  ne: Time
  nei: Time
  not: TimeFilterInput
  notContains: Time
  notContainsi: Time
  notIn: [Time]
  notNull: Boolean
  null: Boolean
  or: [Time]
  startsWith: Time
}

type Update {
  anonymous: Boolean
  author: InnoUserEntityResponse
  comment: String!
  createdAt: DateTime
  linkToCollaborationTab: Boolean
  project: ProjectEntityResponse
  topic: String
  updatedAt: DateTime
}

type UpdateEntity {
  attributes: Update
  id: ID
}

type UpdateEntityResponse {
  data: UpdateEntity
}

type UpdateEntityResponseCollection {
  data: [UpdateEntity!]!
  meta: ResponseCollectionMeta!
}

input UpdateFiltersInput {
  and: [UpdateFiltersInput]
  anonymous: BooleanFilterInput
  author: InnoUserFiltersInput
  comment: StringFilterInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  linkToCollaborationTab: BooleanFilterInput
  not: UpdateFiltersInput
  or: [UpdateFiltersInput]
  project: ProjectFiltersInput
  topic: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input UpdateInput {
  anonymous: Boolean
  author: ID
  comment: String
  linkToCollaborationTab: Boolean
  project: ID
  topic: String
}

type UpdateRelationResponseCollection {
  data: [UpdateEntity!]!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  alternativeText: String
  caption: String
  createdAt: DateTime
  ext: String
  formats: JSON
  hash: String!
  height: Int
  mime: String!
  name: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [GenericMorph]
  size: Float!
  updatedAt: DateTime
  url: String!
  width: Int
}

type UploadFileEntity {
  attributes: UploadFile
  id: ID
}

type UploadFileEntityResponse {
  data: UploadFileEntity
}

type UploadFileEntityResponseCollection {
  data: [UploadFileEntity!]!
  meta: ResponseCollectionMeta!
}

input UploadFileFiltersInput {
  alternativeText: StringFilterInput
  and: [UploadFileFiltersInput]
  caption: StringFilterInput
  createdAt: DateTimeFilterInput
  ext: StringFilterInput
  folder: UploadFolderFiltersInput
  folderPath: StringFilterInput
  formats: JSONFilterInput
  hash: StringFilterInput
  height: IntFilterInput
  id: IDFilterInput
  mime: StringFilterInput
  name: StringFilterInput
  not: UploadFileFiltersInput
  or: [UploadFileFiltersInput]
  previewUrl: StringFilterInput
  provider: StringFilterInput
  provider_metadata: JSONFilterInput
  size: FloatFilterInput
  updatedAt: DateTimeFilterInput
  url: StringFilterInput
  width: IntFilterInput
}

input UploadFileInput {
  alternativeText: String
  caption: String
  ext: String
  folder: ID
  folderPath: String
  formats: JSON
  hash: String
  height: Int
  mime: String
  name: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  size: Float
  url: String
  width: Int
}

type UploadFileRelationResponseCollection {
  data: [UploadFileEntity!]!
}

type UploadFolder {
  children(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderRelationResponseCollection
  createdAt: DateTime
  files(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  name: String!
  parent: UploadFolderEntityResponse
  path: String!
  pathId: Int!
  updatedAt: DateTime
}

type UploadFolderEntity {
  attributes: UploadFolder
  id: ID
}

type UploadFolderEntityResponse {
  data: UploadFolderEntity
}

type UploadFolderEntityResponseCollection {
  data: [UploadFolderEntity!]!
  meta: ResponseCollectionMeta!
}

input UploadFolderFiltersInput {
  and: [UploadFolderFiltersInput]
  children: UploadFolderFiltersInput
  createdAt: DateTimeFilterInput
  files: UploadFileFiltersInput
  id: IDFilterInput
  name: StringFilterInput
  not: UploadFolderFiltersInput
  or: [UploadFolderFiltersInput]
  parent: UploadFolderFiltersInput
  path: StringFilterInput
  pathId: IntFilterInput
  updatedAt: DateTimeFilterInput
}

input UploadFolderInput {
  children: [ID]
  files: [ID]
  name: String
  parent: ID
  path: String
  pathId: Int
}

type UploadFolderRelationResponseCollection {
  data: [UploadFolderEntity!]!
}

type UsersPermissionsCreateRolePayload {
  ok: Boolean!
}

type UsersPermissionsDeleteRolePayload {
  ok: Boolean!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String! = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  blocked: Boolean
  confirmed: Boolean
  email: String
  id: ID!
  role: UsersPermissionsMeRole
  username: String!
}

type UsersPermissionsMeRole {
  description: String
  id: ID!
  name: String!
  type: String
}

type UsersPermissionsPasswordPayload {
  ok: Boolean!
}

type UsersPermissionsPermission {
  action: String!
  createdAt: DateTime
  role: UsersPermissionsRoleEntityResponse
  updatedAt: DateTime
}

type UsersPermissionsPermissionEntity {
  attributes: UsersPermissionsPermission
  id: ID
}

type UsersPermissionsPermissionEntityResponse {
  data: UsersPermissionsPermissionEntity
}

type UsersPermissionsPermissionEntityResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsPermissionFiltersInput {
  action: StringFilterInput
  and: [UsersPermissionsPermissionFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: UsersPermissionsPermissionFiltersInput
  or: [UsersPermissionsPermissionFiltersInput]
  role: UsersPermissionsRoleFiltersInput
  updatedAt: DateTimeFilterInput
}

input UsersPermissionsPermissionInput {
  action: String
  role: ID
}

type UsersPermissionsPermissionRelationResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
}

input UsersPermissionsRegisterInput {
  email: String!
  password: String!
  username: String!
}

type UsersPermissionsRole {
  createdAt: DateTime
  description: String
  name: String!
  permissions(filters: UsersPermissionsPermissionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsPermissionRelationResponseCollection
  type: String
  updatedAt: DateTime
  users(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
}

type UsersPermissionsRoleEntity {
  attributes: UsersPermissionsRole
  id: ID
}

type UsersPermissionsRoleEntityResponse {
  data: UsersPermissionsRoleEntity
}

type UsersPermissionsRoleEntityResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsRoleFiltersInput {
  and: [UsersPermissionsRoleFiltersInput]
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: UsersPermissionsRoleFiltersInput
  or: [UsersPermissionsRoleFiltersInput]
  permissions: UsersPermissionsPermissionFiltersInput
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
  users: UsersPermissionsUserFiltersInput
}

input UsersPermissionsRoleInput {
  description: String
  name: String
  permissions: [ID]
  type: String
  users: [ID]
}

type UsersPermissionsRoleRelationResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
}

type UsersPermissionsUpdateRolePayload {
  ok: Boolean!
}

type UsersPermissionsUser {
  blocked: Boolean
  confirmed: Boolean
  createdAt: DateTime
  email: String!
  provider: String
  role: UsersPermissionsRoleEntityResponse
  updatedAt: DateTime
  username: String!
}

type UsersPermissionsUserEntity {
  attributes: UsersPermissionsUser
  id: ID
}

type UsersPermissionsUserEntityResponse {
  data: UsersPermissionsUserEntity
}

type UsersPermissionsUserEntityResponseCollection {
  data: [UsersPermissionsUserEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsUserFiltersInput {
  and: [UsersPermissionsUserFiltersInput]
  blocked: BooleanFilterInput
  confirmationToken: StringFilterInput
  confirmed: BooleanFilterInput
  createdAt: DateTimeFilterInput
  email: StringFilterInput
  id: IDFilterInput
  not: UsersPermissionsUserFiltersInput
  or: [UsersPermissionsUserFiltersInput]
  password: StringFilterInput
  provider: StringFilterInput
  resetPasswordToken: StringFilterInput
  role: UsersPermissionsRoleFiltersInput
  updatedAt: DateTimeFilterInput
  username: StringFilterInput
}

input UsersPermissionsUserInput {
  blocked: Boolean
  confirmationToken: String
  confirmed: Boolean
  email: String
  password: String
  provider: String
  resetPasswordToken: String
  role: ID
  username: String
}

type UsersPermissionsUserRelationResponseCollection {
  data: [UsersPermissionsUserEntity!]!
}
