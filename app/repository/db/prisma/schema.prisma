// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Comment {
  id          String       @id @default(uuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  objectType  ObjectType   
  objectId    String       @default(uuid()) // ID of the object (if it's a post, news, project, etc)

  text        String       // Text of the comment
  author      String       // ID of the author
  reactions   Reaction[]   // Associated reactions

  additionalObjectType ObjectType?
  additionalObjectId String?
  anonymous Boolean? // in case the Feedback is set to anonymous


  parent      Comment?     @relation("CommentResponseRelation", fields: [parentId], references: [id], onDelete: Cascade)
  parentId    String?      // ID of the parent comment (if it's a response)

  responses   Comment[]    @relation("CommentResponseRelation") // Responses to this comment

  likes       CommentLike[]
}

model Like {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  objectType  ObjectType
  objectId String

  likedBy   String // user id  

   @@unique(fields: [objectId, likedBy])
}

model CommentLike {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  comment   Comment @relation(fields: [commentId], references: [id])
  commentId String

  likedBy   String // user id  

   @@unique(fields: [likedBy, commentId])
}

model Follow {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  objectId  String // followed object
  objectType ObjectType @default(PROJECT) // type of object that was followed
  followedBy String // user id  

   @@unique(fields: [objectId, objectType, followedBy])
}

model PushSubscription {
  id        String   @id @default(uuid())
  userId    String
  createdAt DateTime @default(now())
  subscription String // JSON of push subscription
  browserFingerprint String // Fingerprint to uniquely identify user by their browser
  @@unique([userId, browserFingerprint])
}

model Reaction {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  reactedBy  String // user id
  objectId   String // object id that was reacted to (e.g. id of update or event)
  objectType ObjectType // type of object that was reacted to (e.g. update or event)

  shortCode    String // shortcode of emoji, see unicode
  nativeSymbol String // native representation of emoji symbol, see unicode

  comment   Comment? @relation(fields: [commentId], references: [id]) // only used if associated with a comment
  commentId String?

  @@unique(fields: [reactedBy, objectId, objectType])
  @@map("reactions")
}

model SurveyVote {
  id        String   @id @default(uuid())
  createdAt DateTime @updatedAt @default(now())

  vote             String // vote
  projectId        String // project
  surveyQuestionId String // voted survey question
  votedBy          String // id of author

  @@map(name: "survey_votes")
}

model Post {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  likedBy   String[] // ids of users
  author      String // id of author
  content     String
  anonymous Boolean @default(false)
}

enum ObjectType {
  UPDATE
  EVENT
  COLLABORATION_QUESTION
  POST
  PROJECT
  SURVEY_QUESTION
  COMMENT
  COLLABORATION_COMMENT
}