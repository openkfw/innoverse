// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Comment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  objectType CommentType

  postComment PostComment?
  newsComment NewsComment?

  text   String // text of comment
  author    String // id of author
  upvotedBy String[] // ids of users
  reactions Reaction[]

  parent  Comment? @relation("CommentResponseRelation",fields: [parentId], references: [id], onDelete: Cascade)
  parentId String?

  responses  Comment[]  @relation("CommentResponseRelation")

}

model NewsComment {
  id        String   @id @default(uuid())
  commentId String      @unique
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  newsId    String
}

model PostComment {
  id        String   @id @default(uuid())
  commentId String      @unique
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  postId    String
}

model ProjectComment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  comment   String // text of comment
  projectId String // commented project
  author    String // id of author
  upvotedBy String[] // ids of users

  @@map(name: "project_comments")
}


model CollaborationComment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  comment    String // text of comment
  projectId  String // commented project
  questionId String // commented question
  author     String // id of author
  upvotedBy  String[] // ids of users
  visible    Boolean                        @default(true) // visibility of the comment (default: true) only used for the platform feedback (can only be false on the platform feedback)
  responses  CollaborationCommentResponse[] @relation("Response") // responses to the comment

  @@map(name: "collaboration_comments")
}


model CollaborationCommentResponse {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  response    String // text of response
  author      String // id of the author
  upvotedBy   String[] // ids of users
  commentId   String // id of comment this responds to to
  comment     CollaborationComment @relation("Response", fields: [commentId], references: [id], onDelete: Cascade) // comment this responds to

  @@map("collaboration_comments_responses")
}

model Like {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  projectId String // liked project
  likedBy   String // user id  

   @@unique(fields: [projectId, likedBy])
}

model Follow {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  objectId  String // followed object
  objectType ObjectType @default(PROJECT) // type of object that was followed
  followedBy String // user id  

   @@unique(fields: [objectId, objectType, followedBy])
}

model PushSubscription {
  id        String   @id @default(uuid())
  userId    String
  createdAt DateTime @default(now())
  subscription String // JSON of push subscription
  browserFingerprint String // Fingerprint to uniquely identify user by their browser
  @@unique([userId, browserFingerprint])
}

model Reaction {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  reactedBy  String // user id
  objectId   String // object id that was reacted to (e.g. id of update or event)
  objectType ObjectType // type of object that was reacted to (e.g. update or event)

  shortCode    String // shortcode of emoji, see unicode
  nativeSymbol String // native representation of emoji symbol, see unicode

  comment   Comment? @relation(fields: [commentId], references: [id]) // only used if associated with a comment
  commentId String?

  @@unique(fields: [reactedBy, objectId, objectType])
  @@map("reactions")
}

model SurveyVote {
  id        String   @id @default(uuid())
  createdAt DateTime @updatedAt @default(now())

  vote             String // vote
  projectId        String // project
  surveyQuestionId String // voted survey question
  votedBy          String // id of author

  @@map(name: "survey_votes")
}

model Post {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  upvotedBy   String[] // ids of users
  author      String // id of author
  content     String
  anonymous Boolean @default(false)
  media     String
}

enum ObjectType {
  UPDATE
  EVENT
  COLLABORATION_QUESTION
  COLLABORATION_COMMENT
  POST
  PROJECT
  SURVEY_QUESTION
}

enum CommentType {
  POST_COMMENT
  NEWS_COMMENT
}